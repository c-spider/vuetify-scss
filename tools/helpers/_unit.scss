// @import '../../settings/variables';
// @import '../../settings/theme';

// If true, use rem in styles instead of px.
// NOTE: Has to be here because its used in the variables and theme files.
$values-use-rem: true !default;

@function _rem-separator($list, $separator: false) {
    @if $separator == 'comma' or $separator == 'space' {
        @return append($list, null, $separator);
    }

    @if function-exists('list-separator') == true {
        @return list-separator($list);
    }
}

@function _rem-convert($to, $values...) {
    $result: ();
    $rem-baseline: variable-exists('font-size-root') and $font-size-root or 100%;
    $separator: _rem-separator($values);

    @if unit($rem-baseline) == '%' {
        $rem-baseline: ($rem-baseline / 100%) * 16px;
    }

    @each $value in $values {
        @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
            $result: append($result, $value / 1rem * $rem-baseline, $separator);
        } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {
            $result: append($result, $value / $rem-baseline * 1rem, $separator);
        } @else if type-of($value) == 'list' {
            $value-separator: _rem-separator($value);
            $value: _rem-convert($to, $value...);
            $value: _rem-separator($value, $value-separator);
            $result: append($result, $value, $separator);
        } @else {
            $result: append($result, $value, $separator);
        }
    }

    @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
    @if not $values-use-rem {
        @return _rem-convert(px, $values...);
    } @else {
        @return _rem-convert(rem, $values...);
    }
}
